#include "controlled_payload.h"
/** 
 * @public isExpired
 * 
 * Check if a payload has exceeded it's expiration time as found
 * in the EXPIRATION_TIME constant.
 * 
 * @return bool - true if expired
 * 
*/
bool ControlledPayload::isExpired(ControlledPayload *payload)
{

    if (payload->timestamp == NULL || payload->timestamp == 0)
    {
        return true;
    }

    unsigned long now = millis();
    unsigned long delta = now - payload->timestamp;
    return delta >= ControlledPayload::EXPIRATION_TIME;
}
/** 
 * @public ControlledPayload
 * 
 * Default Constructor 
 * 
*/
ControlledPayload::~ControlledPayload()
{
}
/** 
 * @public ControlledPayload
 * 
 * Constructor 
 * @param unsigned int target - the value of the data from 0 when the system booted
 * @param String payload - the actual data
 * 
*/
ControlledPayload::ControlledPayload(unsigned int target, String payload)
{

    this->timestamp = millis();
    this->target = target;
    this->payload = payload;
}
/** 
 * @public getTarget
 * 
 * Returns the current target 
 * @return unsigned int  
 * 
*/
unsigned int ControlledPayload::getTarget()
{
    return this->target;
}
/** 
 * @public onTarget
 * 
 * Matches a target with the current param
 * @param int target - the param to match
 * @return bool 
 * 
*/
bool ControlledPayload::onTarget(int target)
{
    return target == (int)this->target;
}
/** 
 * @public onTarget
 * 
 * getter for current payload
 * @return String 
 * 
*/
String ControlledPayload::getHoldings()
{
    return this->payload;
}
/** 
 * @public getTimeStamp
 * 
 * getter for current timestamp
 * @return unsigned long 
 * 
*/
unsigned long ControlledPayload::getTimeStamp()
{
    return this->timestamp;
}